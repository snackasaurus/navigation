#!/usr/bin/env python

import rospy

from geometry_msgs.msg import Twist
from visualization_msgs.msg import Marker
from visualization_msgs.msg import MarkerArray
from geometry_msgs.msg import Quaternion, Pose, Point, Vector3
from std_msgs.msg import Header, ColorRGBA, String
from nav_msgs.msg import Odometry
from tf.transformations import euler_from_quaternion
import time

import sys, select, termios, tty, math, tf

msg = """
Control Your Turtlebot!
---------------------------
Moving around:
   u    i    o
   j    k    l
   m    ,    .

q/z : increase/decrease max speeds by 10%
w/x : increase/decrease only linear speed by 10%
e/c : increase/decrease only angular speed by 10%
space key, k : force stop
anything else : stop smoothly

CTRL-C to quit
"""

moveBindings = {
        'i':(1,0),
        'o':(1,-1),
        'j':(0,1),
        'l':(0,-1),
        'u':(1,1),
        ',':(-1,0),
        '.':(-1,1),
        'm':(-1,-1),
           }

speedBindings={
        'q':(1.1,1.1),
        'z':(.9,.9),
        'w':(1.1,1),
        'x':(.9,1),
        'e':(1,1.1),
        'c':(1,.9),
          }

def getKey():
    tty.setraw(sys.stdin.fileno())
    rlist, _, _ = select.select([sys.stdin], [], [], 0.1)
    if rlist:
        key = sys.stdin.read(1)
    else:
        key = ''

    termios.tcsetattr(sys.stdin, termios.TCSADRAIN, settings)
    return key

speed = .2
turn = 1
idd = 0
tflistener = None
pose = None
markerArray = MarkerArray()
odom_data = None

"""def show_text_in_rviz(text):
    global idd
    print "id: " + str(idd)
    print "Size: " + str(len(markerArray.markers))
    marker = Marker(type=Marker.SPHERE, id=idd,
                action=Marker.ADD,
                lifetime=rospy.Duration(100),
                pose=Pose(Point(0.2, 0.2, 0.2), Quaternion(0, 0, 0, 1)),
                scale=Vector3(0.06, 0.06, 0.06),
                header=Header(frame_id='odom'),
                color=ColorRGBA(0.0, 1.0, 1.0, 1.0), text=text,
                frame_locked=True)
    markerArray.markers.append(marker)
    marker_publisher.publish(markerArray),
    idd = idd + 1
"""
def get_stuff(data):
    global odom_data
    odom_data = data

def vels(speed,turn):
    return "currently:\tspeed %s\tturn %s " % (speed,turn)

if __name__=="__main__":
    settings = termios.tcgetattr(sys.stdin)

    rospy.init_node('homing')

    pose = rospy.Subscriber('/odom', Odometry, get_stuff)

    pub = rospy.Publisher('~cmd_vel', Twist, queue_size=5)

    x = 0
    th = 0
    status = 0
    count = 0
    acc = 0.1
    target_speed = 0
    target_turn = 0
    control_speed = 0
    control_turn = 0
    try:
        #print msg
        #print vels(speed,turn)
        while(1):
            if odom_data is not None:
                quaternion = (
                    odom_data.pose.pose.orientation.x,
                    odom_data.pose.pose.orientation.y,
                    odom_data.pose.pose.orientation.z,
                    odom_data.pose.pose.orientation.w)
                euler = euler_from_quaternion(quaternion)
                #print 'roll = ' + str(euler[0])
                #print 'pitc = ' + str(euler[1])
                #print 'yawy = ' + str(euler[2])
            key = getKey()
            if key in moveBindings.keys():
                x = moveBindings[key][0]
                th = moveBindings[key][1]
                count = 0
            elif key in speedBindings.keys():
                speed = speed * speedBindings[key][0]
                turn = turn * speedBindings[key][1]
                count = 0

                if (status == 14):
                    print msg
                status = (status + 1) % 15
            elif key == ' ' or key == 'k' :
                x = 0
                th = 0
                control_speed = 0
                control_turn = 0
            elif key == '1':
                show_text_in_rviz("marker")
            elif key == '2':
                twist = Twist()

                # get rotation

                angular = math.atan2(odom_data.pose.pose.position.y, odom_data.pose.pose.position.x)
                linear = .1

                quaternion = (
                    odom_data.pose.pose.orientation.x,
                    odom_data.pose.pose.orientation.y,
                    odom_data.pose.pose.orientation.z,
                    odom_data.pose.pose.orientation.w)
                euler = euler_from_quaternion(quaternion)
                roll = euler[0]
                pitch = euler[1]
                yaw = euler[2]

                if odom_data.pose.pose.position.y > 0:
                    direction = angular - math.pi
                else:
                    direction = math.pi + angular


                while abs(yaw - direction) > .2:
                    print str(yaw) + " - " + str(direction)
                    twist = Twist()
                    twist.linear.x = 0; twist.linear.y = 0; twist.linear.z = 0
                    twist.angular.x = 0; twist.angular.y = 0; twist.angular.z = angular
                    pub.publish(twist)

                    angular = math.atan2(odom_data.pose.pose.position.y, odom_data.pose.pose.position.x)
                    linear = 0

                    quaternion = (
                        odom_data.pose.pose.orientation.x,
                        odom_data.pose.pose.orientation.y,
                        odom_data.pose.pose.orientation.z,
                        odom_data.pose.pose.orientation.w)
                    euler = euler_from_quaternion(quaternion)
                    roll = euler[0]
                    pitch = euler[1]
                    yaw = euler[2]

                    if odom_data.pose.pose.position.y > 0:
                        direction = angular - math.pi
                    else:
                        direction = math.pi + angular

                while math.sqrt(odom_data.pose.pose.position.x ** 2 + odom_data.pose.pose.position.y ** 2) > 0.1:
                    twist = Twist()
                    twist.linear.x = 0.2; twist.linear.y = 0; twist.linear.z = 0
                    twist.angular.x = 0; twist.angular.y = 0; twist.angular.z = 0
                    pub.publish(twist)


            else:
                count = count + 1
                if count > 4:
                    x = 0
                    th = 0
                if (key == '\x03'):
                    break

            target_speed = speed * x
            target_turn = turn * th

            if target_speed > control_speed:
                control_speed = min( target_speed, control_speed + 0.02 )
            elif target_speed < control_speed:
                control_speed = max( target_speed, control_speed - 0.02 )
            else:
                control_speed = target_speed

            if target_turn > control_turn:
                control_turn = min( target_turn, control_turn + 0.1 )
            elif target_turn < control_turn:
                control_turn = max( target_turn, control_turn - 0.1 )
            else:
                control_turn = target_turn

            twist = Twist()
            twist.linear.x = control_speed; twist.linear.y = 0; twist.linear.z = 0
            twist.angular.x = 0; twist.angular.y = 0; twist.angular.z = control_turn
            pub.publish(twist)


    finally:
        twist = Twist()
        twist.linear.x = 0; twist.linear.y = 0; twist.linear.z = 0
        twist.angular.x = 0; twist.angular.y = 0; twist.angular.z = 0
        pub.publish(twist)

    termios.tcsetattr(sys.stdin, termios.TCSADRAIN, settings)
